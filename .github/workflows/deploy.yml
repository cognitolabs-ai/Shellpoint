name: Deploy to Production

on:
  workflow_run:
    workflows: ["Release"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string
      confirm:
        description: 'Type "confirm" to proceed with production deployment'
        required: true
        default: ''

env:
  REGISTRY: docker.io
  IMAGE_NAME: cognitiolabs/shellpoint

jobs:
  pre-deploy-checks:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'confirm' || github.event_name == 'workflow_run'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate inputs
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.environment }}" = "production" ] && [ "${{ github.event.inputs.confirm }}" != "confirm" ]; then
            echo "‚ùå Production deployment requires confirmation"
            exit 1
          fi

      - name: Check release exists
        run: |
          version="${{ github.event.inputs.version || 'latest' }}"
          echo "Checking for ShellPoint image version: $version"
          
          # Check if image exists on Docker Hub
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$version 2>/dev/null; then
            echo "‚úÖ Docker image found: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$version"
          else
            echo "‚ùå Docker image not found: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$version"
            exit 1
          fi

  deploy-staging:
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: github.event.inputs.environment == 'staging' || github.event_name == 'workflow_run'
    environment: staging
    
    steps:
      - name: Deploy to Staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version || 'latest' }}"
          
          # Your staging deployment logic here
          # Example commands:
          # docker-compose -f docker-compose.staging.yml pull
          # docker-compose -f docker-compose.staging.yml up -d
          # docker logout
          
          echo "‚úÖ Staging deployment completed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - name: Production Deployment Safety Check
        run: |
          echo "‚ö†Ô∏è PRODUCTION DEPLOYMENT INITIATED"
          echo "Version: ${{ github.event.inputs.version || 'latest' }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Branch: ${{ github.ref_name }}"
          
          # Additional safety checks could be added here
          sleep 10  # Pause for manual verification if needed

      - name: Create backup
        run: |
          echo "üìã Creating backup before production deployment..."
          # Your backup logic here
          echo "‚úÖ Backup completed"

      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying to PRODUCTION environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version || 'latest' }}"
          
          # Production deployment logic
          # docker-compose -f docker-compose.prod.yml pull
          # docker-compose -f docker-compose.prod.yml up -d --no-deps shellpoint
          # docker-compose -f docker-compose.prod.yml exec shellpoint npm run health-check
          
          echo "‚úÖ Production deployment completed"

      - name: Post-deployment verification
        run: |
          echo "üîç Running post-deployment verification..."
          sleep 30  # Wait for application to start
          
          # Health checks
          # curl -f https://your-domain.com/health
          # Check metrics, logs, etc.
          
          echo "‚úÖ Post-deployment verification completed"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed - initiating rollback..."
          # Your rollback logic here
          echo "üîÑ Rollback completed"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
            echo "‚úÖ Staging deployment: SUCCESS"
          else
            echo "‚ùå Staging deployment: FAILED"
          fi
          
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "‚úÖ Production deployment: SUCCESS"
          elif [ "${{ needs.deploy-production.result }}" = "failure" ]; then
            echo "‚ùå Production deployment: FAILED"
          fi
          
          # Add Slack, Discord, or email notifications here
